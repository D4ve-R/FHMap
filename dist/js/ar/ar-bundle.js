!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("aframe"));else if("function"==typeof define&&define.amd)define(["aframe"],t);else{var i="object"==typeof exports?t(require("aframe")):t(e.AFRAME);for(var o in i)("object"==typeof exports?exports:e)[o]=i[o]}}(this,(e=>(()=>{var t={543:()=>{},223:t=>{"use strict";t.exports=e}},i={};function o(e){var r=i[e];if(void 0!==r)return r.exports;var n=i[e]={exports:{}};return t[e](n,n.exports,o),n.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";o.r(r);var e=o(223);class t extends Error{constructor(e,t){super(e,{geojson:t}),this.name="GeoJSONError"}}function i(e,i,o,r,n,s){if(function(e){if(!(e.hasOwnProperty("type")&&e.hasOwnProperty("geometry")&&e.hasOwnProperty("properties")&&e.geometry.hasOwnProperty("coordinates")))throw new t("Invalid GeoJSON Feature",e)}(e),"Point"!==e.geometry.type)throw new t("Only Point geometry is supported",e);const[a,l]=e.geometry.coordinates,c=e.properties.scale||r||1,d=e.properties.position||s||{x:0,y:0,z:0},p=e.properties.color||n||"blue",u=e.properties.primitive||o||"a-cone",h=i||"",m=document.createElement("a-entity");if(m.setAttribute("look-at","[gps"+h+"-camera]"),m.setAttribute("gps"+h+"-entity-place",{latitude:a,longitude:l}),m.setAttribute("position",d),e.properties.name){const t=10*c,i=document.createElement("a-text");i.setAttribute("value",e.properties.name),i.setAttribute("scale",{x:t,y:t,z:t}),i.setAttribute("align","center"),i.setAttribute("position",{x:0,y:t/5,z:0}),m.appendChild(i)}const g=document.createElement(u);return g.setAttribute("scale",{x:c,y:c,z:c}),g.setAttribute("material",{color:p}),"a-cone"===u&&(g.setAttribute("radius-bottom",.1),g.setAttribute("radius-top",.75),g.setAttribute("height",2)),m.appendChild(g),m}e.registerComponent("geojson-entity",{schema:{url:{type:"string",default:""},primitive:{type:"string",default:"a-cone"},scale:{type:"number",default:10},color:{type:"string",default:"blue"},updateVisibility:{type:"boolean",default:!1}},multiple:!0,init:function(){const e=document.querySelector("a-camera");e.getAttribute("gps-projected-camera")?this.projected="-projected":e.getAttribute("gps-new-camera")&&(this.projected="-new"),window.addEventListener("gps-camera-update-position",(e=>{this.el.setAttribute("terrarium-dem",{lat:e.detail.position.latitude,lon:e.detail.position.longitude})})),this.el.addEventListener("elevation-available",(t=>{const i=e.getAttribute("position");i.y=t.detail.elevation+1.6,e.setAttribute("position",i)})),this.el.addEventListener("osm-data-loaded",(e=>{console.log(e.detail)}))},update:function(){this.loader=document.createElement("div"),this.loader.classList.add("ar-loader"),document.body.appendChild(this.loader),this.geoJSONEntities?.length>0&&this.geoJSONEntities.forEach((e=>this.el.sceneEl.removeChild(e))),this.geoJSONEntities=[],this.i=0;const e=this.data;try{window.dispatchEvent(new Event("geojson-load-start")),fetch(e.url).then((e=>e.json())).then((o=>{if("object"!=typeof o||Array.isArray(o)||null===o)throw new t("Invalid GeoJSON",o);if("FeatureCollection"===o.type)o.features.forEach((t=>{try{const o=i(t,this.projected,e.primitive,e.scale,e.color);this.geoJSONEntities.push(o),this.el.sceneEl.appendChild(o)}catch(e){console.warn(e)}window.dispatchEvent(new CustomEvent("geojson-load-progress",{progress:++this.i/this.geoJSONEntities.length}))}));else try{const t=i(o,this.projected,e.primitive,e.scale,e.color);this.geoJSONEntities.push(t),this.el.sceneEl.appendChild(t)}catch(e){console.warn(e)}if(this.geoJSONEntities.length<1)throw new t("No valid features in GeoJSON",void 0)}))}catch(e){console.trace(e)}e.updateVisibility&&this.el.addEventListener("gps-camera-update-position",this.visibilityHandler),window.dispatchEvent(new CustomEvent("geojson-load-end",{geojson:this.geoJSONEntities})),this.loader.remove()},remove:function(){data.updateVisibility&&this.el.removeEventListener("gps-camera-update-position",this.visibilityHandler),this.geoJSONEntities.forEach((e=>this.el.sceneEl.removeChild(e)))},visibilityHandler:function(e){e.target.getAttribute("distance")>100?e.target.setAttribute("visible",!1):e.target.setAttribute("visible",!0)}});var n=o(543),s=o.n(n);e.registerComponent("location-url",{schema:{name:{type:"string",default:"Marker"},scale:{type:"number",default:20},color:{type:"string",default:"blue"},primitive:{type:"string",default:"a-cone"}},init:function(){const e=s()("lat"),t=s()("lng"),i=s()("name"),o=document.querySelector("a-camera");if(o.getAttribute("gps-projected-camera")?this.projected="-projected":o.getAttribute("gps-new-camera")&&(this.projected="-new"),null!=e&&null!=t){const o=function({name:e,coords:t,projected:i,primitive:o,color:r,scale:n}){const s=20*n,a=document.createElement("a-entity");a.setAttribute("look-at","[gps"+i+"-camera]"),a.setAttribute("gps"+i+"-entity-place",{latitude:t.lat,longitude:t.lng}),a.setAttribute("position",{x:0,y:1,z:0});const l=document.createElement("a-text");l.setAttribute("value",e),l.setAttribute("scale",{x:s,y:s,z:s}),l.setAttribute("align","center"),l.setAttribute("position",{x:0,y:s/4,z:0}),a.appendChild(l);const c=document.createElement(o);return c.setAttribute("scale",{x:n,y:n,z:n}),c.setAttribute("material",{color:r}),"a-cone"===o&&(c.setAttribute("radius-bottom",.1),c.setAttribute("radius-top",1),c.setAttribute("height",3)),a.appendChild(c),a}({name:i||this.data.name,projected:this.projected||"",coords:{lat:e,lng:t},primitive:this.data.primitive,color:this.data.color,scale:this.data.scale});this.el.sceneEl.appendChild(o)}}}),e.registerComponent("path-entity",{schema:{url:{type:"string",default:""},color:{type:"string",default:"green"}},multiple:!0,init:function(){this.projected="",this.loader=document.createElement("div"),this.loader.classList.add("ar-loader"),document.body.appendChild(this.loader);const e=document.querySelector("a-camera");e.getAttribute("gps-projected-camera")?this.projected="-projected":e.getAttribute("gps-new-camera")&&(this.projected="-new"),this.camera=e.components[`gps${this.projected}-camera`]},update:function(){this.pathEntities?.length>0&&this.pathEntities.forEach((e=>e.remove())),this.pathEntities=[],this.i=1;try{fetch(this.data.url).then((e=>e.json())).then((e=>{if("object"!=typeof e||Array.isArray(e)||null===e)throw new Error("Invalid GeoJSON");if("FeatureCollection"===e.type)e.features.forEach((e=>{try{const t=this._createPathEntity(e,this.data.color);this.pathEntities.push(t),this.el.sceneEl.appendChild(t)}catch(e){console.warn(e)}})),window.dispatchEvent(new CustomEvent("geojson-load-progress",{progress:this.i++/this.pathEntities.length}));else try{const t=this._createPathEntity(e,this.data.color);this.pathEntities.push(t),this.el.sceneEl.appendChild(t)}catch(e){console.warn(e)}if(this.pathEntities.length<1)throw new Error("No valid features in GeoJSON")}))}catch(e){console.trace(e)}window.dispatchEvent(new CustomEvent("geojson-load-end",{path:this.pathEntities})),this.loader.remove()},_createPathEntity:function(e,t){const i=e.properties.color||t||"blue";if(this.rendererSystem=this.el.sceneEl.systems.renderer,"LineString"!==e.geometry.type)throw new Error("PathEntity only supports LineString geometries");if(e.geometry.coordinates.length<2)throw new Error("PathEntity requires at least two coordinates");const o=document.createElement("a-entity"),r=new THREE.LineBasicMaterial({color:new THREE.Color(i),linewidth:5});let n=[];for(let t=0;t<e.geometry.coordinates.length-1;t++){const[i,o]=e.geometry.coordinates[t],[r,s]=e.geometry.coordinates[t+1],a=this.camera.latLonToWorld(i,o),l=this.camera.latLonToWorld(r,s);n.push(new THREE.Vector3(a[0],0,a[1])),n.push(new THREE.Vector3(l[0],0,l[1])),e.properties.name.toLowerCase()}const s=(new THREE.BufferGeometry).setFromPoints(n);return o.el.setObject3D(e.properties.name,new THREE.Line(s,r)),this.rendererSystem.applyColorCorrection(r.color),o}})})(),r})()));